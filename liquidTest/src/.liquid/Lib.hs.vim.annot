1:1-1:1::Lib.$trModule :: "GHC.Types.Module"
6:1-6:6::Lib.myDiv :: "GHC.Types.Int -> {VV : GHC.Types.Int | VV /= 0} -> GHC.Types.Int"
8:1-8:8::Lib.safeDiv :: "GHC.Types.Int -> GHC.Types.Int -> (GHC.Maybe.Maybe GHC.Types.Int)"
8:9-8:10::a :: "GHC.Types.Int"
8:15-8:22::_ :: "{VV : forall a .\n      {v : (GHC.Maybe.Maybe a) | isJust v <=> false} | VV == Nothing}"
9:15-9:19::_ :: "{VV : forall a .\n      x1:a -> {v : (GHC.Maybe.Maybe a) | (isJust v <=> true)\n                                         && fromJust v == x1} | VV == Just}"
9:22-9:31::lq_anf$##7205759403792800756 :: "GHC.Types.Int"
9:28-9:29::a :: "{v : GHC.Types.Int | v == a}"
9:30-9:31::ds_d1R1 :: "GHC.Types.Int"
14:1-14:9::Lib.someFunc :: "(GHC.Types.IO ())"
15:9-15:30::lq_anf$##7205759403792800759 :: "(GHC.Types.IO ())"
15:18-15:30::lq_anf$##7205759403792800758 :: "[GHC.Types.Char]"
16:9-16:10::a :: "GHC.Types.Int"
16:14-16:20::_ :: "(GHC.Types.IO GHC.Types.Int)"
17:9-17:30::lq_anf$##7205759403792800762 :: "(GHC.Types.IO ())"
17:18-17:30::lq_anf$##7205759403792800761 :: "[GHC.Types.Char]"
18:9-18:10::b :: "GHC.Types.Int"
18:14-18:20::_ :: "(GHC.Types.IO GHC.Types.Int)"
19:14-19:25::lq_anf$##7205759403792800763 :: "(GHC.Maybe.Maybe GHC.Types.Int)"
19:22-19:23::a :: "{v : GHC.Types.Int | v == a}"
19:24-19:25::b :: "{v : GHC.Types.Int | v == b}"
20:27-20:44::System.IO.putStrLn :: "[GHC.Types.Char] -> (GHC.Types.IO ())"
20:36-20:44::lq_anf$##7205759403792800768 :: "[GHC.Types.Char]"
20:42-20:43::v :: "{v' : GHC.Types.Int | v' == v}"
22:34-22:60::lq_anf$##7205759403792800766 :: "[GHC.Types.Char]"
23:28-23:36::Lib.someFunc :: "(GHC.Types.IO ())"